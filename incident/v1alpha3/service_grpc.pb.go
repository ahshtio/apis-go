// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha3

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IncidentServiceClient is the client API for IncidentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IncidentServiceClient interface {
	// GetIncident returns exactly 1 incident matching the criteria supplied as part of GetIncidentRequest
	GetIncident(ctx context.Context, in *GetIncidentRequest, opts ...grpc.CallOption) (*Incident, error)
	// GetIncidents returns multiple incidents matching the supplied criteria
	GetIncidents(ctx context.Context, in *GetIncidentsRequest, opts ...grpc.CallOption) (*GetIncidentsResponse, error)
	// PutIncident completely replaces the incident matching the ID in the incident supplied with the contents
	// of that incident.
	PutIncident(ctx context.Context, in *PutIncidentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DeleteIncident deletes an incident.
	DeleteIncident(ctx context.Context, in *DeleteIncidentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// UpdateIncident modifies an incident as supplied by the UpdateIncidentRequest
	UpdateIncident(ctx context.Context, in *UpdateIncidentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// WatchIncidents returns a response that indicates when incidents that match the criteria supplied in
	// WatchIncidentRequest have changed.
	WatchIncidents(ctx context.Context, in *WatchIncidentRequest, opts ...grpc.CallOption) (IncidentService_WatchIncidentsClient, error)
	// AddEvent adds an event to an existing incident as supplised in the AddEventRequest.
	AddEvent(ctx context.Context, in *AddEventRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type incidentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIncidentServiceClient(cc grpc.ClientConnInterface) IncidentServiceClient {
	return &incidentServiceClient{cc}
}

func (c *incidentServiceClient) GetIncident(ctx context.Context, in *GetIncidentRequest, opts ...grpc.CallOption) (*Incident, error) {
	out := new(Incident)
	err := c.cc.Invoke(ctx, "/v1alpha3.IncidentService/GetIncident", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incidentServiceClient) GetIncidents(ctx context.Context, in *GetIncidentsRequest, opts ...grpc.CallOption) (*GetIncidentsResponse, error) {
	out := new(GetIncidentsResponse)
	err := c.cc.Invoke(ctx, "/v1alpha3.IncidentService/GetIncidents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incidentServiceClient) PutIncident(ctx context.Context, in *PutIncidentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1alpha3.IncidentService/PutIncident", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incidentServiceClient) DeleteIncident(ctx context.Context, in *DeleteIncidentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1alpha3.IncidentService/DeleteIncident", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incidentServiceClient) UpdateIncident(ctx context.Context, in *UpdateIncidentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1alpha3.IncidentService/UpdateIncident", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incidentServiceClient) WatchIncidents(ctx context.Context, in *WatchIncidentRequest, opts ...grpc.CallOption) (IncidentService_WatchIncidentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IncidentService_serviceDesc.Streams[0], "/v1alpha3.IncidentService/WatchIncidents", opts...)
	if err != nil {
		return nil, err
	}
	x := &incidentServiceWatchIncidentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IncidentService_WatchIncidentsClient interface {
	Recv() (*WatchIncidentResponse, error)
	grpc.ClientStream
}

type incidentServiceWatchIncidentsClient struct {
	grpc.ClientStream
}

func (x *incidentServiceWatchIncidentsClient) Recv() (*WatchIncidentResponse, error) {
	m := new(WatchIncidentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *incidentServiceClient) AddEvent(ctx context.Context, in *AddEventRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1alpha3.IncidentService/AddEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IncidentServiceServer is the server API for IncidentService service.
// All implementations must embed UnimplementedIncidentServiceServer
// for forward compatibility
type IncidentServiceServer interface {
	// GetIncident returns exactly 1 incident matching the criteria supplied as part of GetIncidentRequest
	GetIncident(context.Context, *GetIncidentRequest) (*Incident, error)
	// GetIncidents returns multiple incidents matching the supplied criteria
	GetIncidents(context.Context, *GetIncidentsRequest) (*GetIncidentsResponse, error)
	// PutIncident completely replaces the incident matching the ID in the incident supplied with the contents
	// of that incident.
	PutIncident(context.Context, *PutIncidentRequest) (*empty.Empty, error)
	// DeleteIncident deletes an incident.
	DeleteIncident(context.Context, *DeleteIncidentRequest) (*empty.Empty, error)
	// UpdateIncident modifies an incident as supplied by the UpdateIncidentRequest
	UpdateIncident(context.Context, *UpdateIncidentRequest) (*empty.Empty, error)
	// WatchIncidents returns a response that indicates when incidents that match the criteria supplied in
	// WatchIncidentRequest have changed.
	WatchIncidents(*WatchIncidentRequest, IncidentService_WatchIncidentsServer) error
	// AddEvent adds an event to an existing incident as supplised in the AddEventRequest.
	AddEvent(context.Context, *AddEventRequest) (*empty.Empty, error)
	mustEmbedUnimplementedIncidentServiceServer()
}

// UnimplementedIncidentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIncidentServiceServer struct {
}

func (*UnimplementedIncidentServiceServer) GetIncident(context.Context, *GetIncidentRequest) (*Incident, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncident not implemented")
}
func (*UnimplementedIncidentServiceServer) GetIncidents(context.Context, *GetIncidentsRequest) (*GetIncidentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncidents not implemented")
}
func (*UnimplementedIncidentServiceServer) PutIncident(context.Context, *PutIncidentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutIncident not implemented")
}
func (*UnimplementedIncidentServiceServer) DeleteIncident(context.Context, *DeleteIncidentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIncident not implemented")
}
func (*UnimplementedIncidentServiceServer) UpdateIncident(context.Context, *UpdateIncidentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIncident not implemented")
}
func (*UnimplementedIncidentServiceServer) WatchIncidents(*WatchIncidentRequest, IncidentService_WatchIncidentsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchIncidents not implemented")
}
func (*UnimplementedIncidentServiceServer) AddEvent(context.Context, *AddEventRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEvent not implemented")
}
func (*UnimplementedIncidentServiceServer) mustEmbedUnimplementedIncidentServiceServer() {}

func RegisterIncidentServiceServer(s *grpc.Server, srv IncidentServiceServer) {
	s.RegisterService(&_IncidentService_serviceDesc, srv)
}

func _IncidentService_GetIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncidentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidentServiceServer).GetIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha3.IncidentService/GetIncident",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidentServiceServer).GetIncident(ctx, req.(*GetIncidentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncidentService_GetIncidents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncidentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidentServiceServer).GetIncidents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha3.IncidentService/GetIncidents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidentServiceServer).GetIncidents(ctx, req.(*GetIncidentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncidentService_PutIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutIncidentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidentServiceServer).PutIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha3.IncidentService/PutIncident",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidentServiceServer).PutIncident(ctx, req.(*PutIncidentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncidentService_DeleteIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIncidentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidentServiceServer).DeleteIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha3.IncidentService/DeleteIncident",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidentServiceServer).DeleteIncident(ctx, req.(*DeleteIncidentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncidentService_UpdateIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIncidentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidentServiceServer).UpdateIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha3.IncidentService/UpdateIncident",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidentServiceServer).UpdateIncident(ctx, req.(*UpdateIncidentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncidentService_WatchIncidents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchIncidentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IncidentServiceServer).WatchIncidents(m, &incidentServiceWatchIncidentsServer{stream})
}

type IncidentService_WatchIncidentsServer interface {
	Send(*WatchIncidentResponse) error
	grpc.ServerStream
}

type incidentServiceWatchIncidentsServer struct {
	grpc.ServerStream
}

func (x *incidentServiceWatchIncidentsServer) Send(m *WatchIncidentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _IncidentService_AddEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidentServiceServer).AddEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha3.IncidentService/AddEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidentServiceServer).AddEvent(ctx, req.(*AddEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IncidentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha3.IncidentService",
	HandlerType: (*IncidentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIncident",
			Handler:    _IncidentService_GetIncident_Handler,
		},
		{
			MethodName: "GetIncidents",
			Handler:    _IncidentService_GetIncidents_Handler,
		},
		{
			MethodName: "PutIncident",
			Handler:    _IncidentService_PutIncident_Handler,
		},
		{
			MethodName: "DeleteIncident",
			Handler:    _IncidentService_DeleteIncident_Handler,
		},
		{
			MethodName: "UpdateIncident",
			Handler:    _IncidentService_UpdateIncident_Handler,
		},
		{
			MethodName: "AddEvent",
			Handler:    _IncidentService_AddEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchIncidents",
			Handler:       _IncidentService_WatchIncidents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "incident/v1alpha3/service.proto",
}
